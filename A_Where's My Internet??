from collections import defaultdict, deque

def find_unconnected_houses(n, m, connections):
    # Initialize adjacency list for the graph
    graph = defaultdict(list)
    
    # Fill the graph with the connections
    for house1, house2 in connections:
        graph[house1].append(house2)
        graph[house2].append(house1)
    
    # Perform BFS or DFS starting from house 1
    visited = [False] * (n + 1)  # To mark houses that are visited
    visited[1] = True  # House 1 is already connected
    
    # Use a queue for BFS (could also use a stack for DFS)
    queue = deque([1])
    
    while queue:
        house = queue.popleft()
        for neighbor in graph[house]:
            if not visited[neighbor]:
                visited[neighbor] = True
                queue.append(neighbor)
    
    # Collect all houses that are not visited
    unconnected_houses = []
    for house in range(1, n + 1):
        if not visited[house]:
            unconnected_houses.append(house)
    
    # If all houses are connected, output "Connected"
    if not unconnected_houses:
        return ["Connected"]
    
    # Otherwise, output the unconnected houses in increasing order
    return list(map(str, sorted(unconnected_houses)))

# Read input
n, m = map(int, input().split())  # n = number of houses, m = number of connections
connections = [tuple(map(int, input().split())) for _ in range(m)]

# Get the result
result = find_unconnected_houses(n, m, connections)

# Print the result
for line in result:
    print(line)
